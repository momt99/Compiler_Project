program -> #pstart declaration_list EOF #pend
declaration_list -> declaration_list declaration | ϵ
declaration -> type_specifier ID var_declaration_rest | type_specifier ID fun_declaration_rest
var_declaration_rest -> ; #var_dec | [ NUMBER ] ; #arr_dec
type_specifier -> int | void
fun_declaration_rest -> #func_dec ( params ) compound_stmt
params -> void | void ID #var_dec param_mult_list_optional | void ID [ ] #arr_dec param_mult_list_optional | int ID #var_dec param_mult_list_optional | int ID [ ] #arr_dec param_mult_list_optional
param_mult_list_optional -> , param_list | ϵ
param_list -> param_list , param | param
param -> type_specifier ID #var_dec | type_specifier ID [ ] #arr_dec
compound_stmt -> { #begin_scope declaration_list statement_list } #end_scope
statement_list -> statement_list statement | ϵ
statement -> expression_stmt | compound_stmt | selection_stmt | iteration_stmt | return_stmt | switch_stmt
expression_stmt -> expression ; | continue ; #continue | break ; #break | ;
selection_stmt -> if ( expression ) statement else statement
iteration_stmt -> while ( expression ) statement
return_stmt -> return ; #return | return expression ; #put_retval #return
switch_stmt -> switch ( expression ) { case_stmts default_stmt }
case_stmts -> case_stmts case_stmt | ϵ
case_stmt -> case NUMBER : statement_list
default_stmt -> default : statement_list | ϵ
expression -> ID = expression #var_assign | ID [ expression ] = expression #arr_assign | ID [ expression ] #put_arr_elem simple_expression_by_id | ID ( args ) #call simple_expression_by_id | ID #put_var simple_expression_by_id | signed_factor_without_imm_id simple_expression_by_id
simple_expression_by_id -> term' additive_expression' compare_or_not
compare_or_not -> relop additive_expression #compare | ϵ
relop -> < | ==
additive_expression -> term additive_expression'
additive_expression' -> addop term #add_sub additive_expression' | ϵ
addop -> + | -
term -> signed_factor term'
term' -> * signed_factor #mult term' | ϵ
sign -> + | -
signed_factor -> factor | sign factor #apply_sign
signed_factor_without_imm_id -> factor_without_id | sign factor #apply_sign
factor -> ( expression ) | ID call_var_unshared | NUMBER #put_num
factor_without_id -> ( expression ) | NUMBER #put_num
call_var_unshared -> ( args ) #call | [ expression ] #put_arr_elem | #put_var
args -> arg_list | ϵ
arg_list -> arg_list , expression | expression #put_arg